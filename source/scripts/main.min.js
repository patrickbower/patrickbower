(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _init = require('./utilities/init');

/**
* Run time script initalising when document ready.
*
* @function self invoking
*/
window.onload = function () {
  (0, _init.init)(document);
}; /**
    * Dependencies
    */

},{"./utilities/init":13}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.modules = undefined;

var _modules;

var _modelLaunch = require('./model-launch');

var _contactForm = require('./contact-form');

var _email = require('./email');

var _backButton = require('./back-button');

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var modules = (_modules = {
    model: _modelLaunch.ModelLaunch
}, _defineProperty(_modules, 'back-button', _backButton.BackButton), _defineProperty(_modules, 'contact', _contactForm.ContactForm), _defineProperty(_modules, 'email', _email.Email), _modules);

exports.modules = modules;

},{"./back-button":3,"./contact-form":4,"./email":5,"./model-launch":6}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.BackButton = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utilities = require('../utilities/_utilities');

var utility = _interopRequireWildcard(_utilities);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaults = {
    element: undefined,
    selectors: {
        button: 'js-back-button'
    }
};

/**
 * Replicate native back button functionality
 *
 * @module BackButton
 * @class BackButton
 */

var BackButton = exports.BackButton = function () {

    /**
     * @constructor
     * @param {object} properties
     */

    function BackButton() {
        var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, BackButton);

        var members = Object.assign({}, defaults, properties);

        this.element = members.element;
        this.selectors = members.selectors;
    }

    /**
     * Initalise and setup at runtime.
     *
     * @function initilise function
     */


    _createClass(BackButton, [{
        key: 'init',
        value: function init() {
            this.bindEvents();
        }

        /**
         * Add event handlers.
         *
         * @function bindEvents
         */

    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            var instance = this;

            var go_back_one_event = {
                handleEvent: function handleEvent(event) {
                    event.preventDefault();
                    instance.goBackOnePage();
                }
            };

            var button = document.querySelector('.' + this.selectors.button);
            button.addEventListener('click', go_back_one_event);
        }

        /**
         * Go back in history and use previous page position
         *
         * @function goBackOnePage
         */

    }, {
        key: 'goBackOnePage',
        value: function goBackOnePage() {
            window.history.back();
        }
    }]);

    return BackButton;
}();

},{"../utilities/_utilities":9}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ContactForm = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utilities = require('../utilities/_utilities');

var utility = _interopRequireWildcard(_utilities);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaults = {
    element: undefined,
    selectors: {
        contact_form: 'js-contact--form',
        submit_button: 'js-contact--submit',
        confirm_input: 'js-contact--confirm',
        contact_section: 'js-contact--section'
    }
};

/**
 * Enhance the contact form.
 *
 * @module Contact Form
 * @class ContactForm
 */

var ContactForm = exports.ContactForm = function () {

    /**
     * Launches full page model.
     *
     * @constructor
     * @param {object} the origin module that launches the model
     */

    function ContactForm() {
        var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, ContactForm);

        var members = Object.assign({}, defaults, properties);

        this.element = members.element;
        this.selectors = members.selectors;
        this.email = members.email;
    }

    /**
     * Initalise and setup at runtime.
     *
     * @function init
     */


    _createClass(ContactForm, [{
        key: 'init',
        value: function init() {
            this.hiddenInput();
            this.bindEvents();
        }

        /**
         * Add event listners where requiried.
         *
         * @function bindEvents
         */

    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            var instance = this;

            // form submit button
            var submit_form_event = {
                handleEvent: function handleEvent(event) {
                    event.preventDefault();
                    instance.submitForm();
                }
            };

            var submit_button = this.element.querySelector('.' + this.selectors.submit_button);
            submit_button.addEventListener('click', submit_form_event);
        }

        /**
         * Prevent tabbing into hidden input placed to encourage spam bots.
         *
         * @function hiddenInput
         * @param contactForm - The module html.
         */

    }, {
        key: 'hiddenInput',
        value: function hiddenInput() {
            var confirm = this.element.querySelector('.' + this.selectors.confirm_input);
            confirm.tabIndex = -1;
        }

        /**
        * Get content via Ajax.
        *
        * @function submitForm
        * @requires {function} ajax utility
        */

    }, {
        key: 'submitForm',
        value: function submitForm() {
            var _this = this;

            var form = this.element.querySelector('.' + this.selectors.contact_form);
            var formAction = form.action;

            var _formAction$split = formAction.split('#');

            var _formAction$split2 = _slicedToArray(_formAction$split, 2);

            var page_url = _formAction$split2[0];
            var fragment_selector = _formAction$split2[1];


            utility.ajax(page_url, function (data) {
                _this.htmlFragment = data.querySelector('.' + fragment_selector);

                _this.confirmSubmit();
            });
        }

        /**
         * Replace contact form with confermation message.
         *
         */

    }, {
        key: 'confirmSubmit',
        value: function confirmSubmit() {

            // fade out content
            var contact_section = this.element.querySelector('.' + this.selectors.contact_section);
            contact_section.classList.add('fade--out');

            // build confirm element
            var contact_confirm = document.createElement('div');
            contact_confirm.classList.add('animate--in');
            contact_confirm.appendChild(this.htmlFragment);
            this.element.appendChild(contact_confirm);

            // add and fade in when content faded out
            setTimeout(function () {
                contact_section.classList.add('display--none');
                contact_confirm.classList.add('fade--in');
            }, utility.settings.animation.default_timimg);
        }
    }]);

    return ContactForm;
}();

},{"../utilities/_utilities":9}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Email = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utilities = require('../utilities/_utilities');

var utility = _interopRequireWildcard(_utilities);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaults = {
    element: undefined,
    email: {
        first: 'bower.patrick',
        last: 'gmail.com'
    }
};

/**
 * Create direct email link instead of linking
 * to contact form model.
 *
 * @module Email
 * @class Email
 */

var Email = exports.Email = function () {

    /**
     * @constructor
     * @param {object} element to add email button into.
     */

    function Email() {
        var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, Email);

        var members = Object.assign({}, defaults, properties);

        this.element = members.element;
        this.selectors = members.selectors;
        this.email = members.email;
    }

    /**
     * Initalise and setup at runtime.
     *
     * @function init
     */


    _createClass(Email, [{
        key: 'init',
        value: function init() {
            this.addEmail();
        }

        /**
         * Add direct email address button to limit spaming bots.
         *
         * @function addEmail
         */

    }, {
        key: 'addEmail',
        value: function addEmail() {

            // construct button
            var anchor = document.createElement('a');
            anchor.setAttribute('class', 'button button--white');
            anchor.setAttribute('href', 'mailto:' + this.email.first + '@' + this.email.last);
            anchor.innerText = this.email.first + '@' + this.email.last;

            // append button
            this.element.appendChild(anchor);
        }
    }]);

    return Email;
}();

},{"../utilities/_utilities":9}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModelLaunch = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utilities = require('../utilities/_utilities');

var utility = _interopRequireWildcard(_utilities);

var _modelWindow = require('./model-window');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaults = {
    selectors: {
        launch_button: 'js-model--launch',
        model_template: 'js-model-template',
        model_window: 'js-model-template--window'
    }
};

/**
 * Setup and get params from source markup ready to launch model.
 *
 * @module Model Launch
 * @class ModelLaunch
 */

var ModelLaunch = exports.ModelLaunch = function () {

    /**
     * Launches full page model.
     *
     * @constructor
     * @param {object} the origin module that launches the model
     */

    function ModelLaunch() {
        var properties = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

        _classCallCheck(this, ModelLaunch);

        var members = Object.assign({}, defaults, properties);

        this.element = members.element;
        this.selectors = members.selectors;
    }

    _createClass(ModelLaunch, [{
        key: 'init',


        /**
         * initalise
         *
         */
        value: function init() {

            // set defaults
            this.modelLayout = false;

            // setup
            this.getLayout();
            this.storeTemplate();
            this.bindEvents();
        }
    }, {
        key: 'getLayout',


        /**
         * Model should only be shown for desktop - mobile should link to page
         *
         * @requires {function} breakpoint
         */
        value: function getLayout() {

            var layout = utility.breakpoint();

            if (layout.value === 'desktop') {
                this.modelLayout = true;
            } else {
                this.modelLayout = false;
            }
        }

        /**
         * Fetch and keep model template in memory.
         *
         */

    }, {
        key: 'storeTemplate',
        value: function storeTemplate() {

            var module_template = document.querySelector('#' + this.selectors.model_template);
            this.modelWindowTemplate = module_template.content.querySelector('.' + this.selectors.model_window);
        }
    }, {
        key: 'bindEvents',


        /**
         * Add event handlers.
         *
         */
        value: function bindEvents() {
            var instance = this;

            // check breakpoint on window resize
            var window_resize_event = {
                handleEvent: function handleEvent(event) {
                    instance.getLayout();
                }
            };

            window.addEventListener('resize', window_resize_event);

            // launch via button
            var launch_button_event = {
                handleEvent: function handleEvent(event) {

                    // link directly to page
                    if (instance.modelLayout === false) {
                        return;

                        // or display in model
                    } else {
                            event.preventDefault();
                            instance.createModel();
                        }
                }
            };

            this.launchButton = this.element.querySelector('.' + this.selectors.launch_button);
            this.launchButton.addEventListener('click', launch_button_event);
        }
    }, {
        key: 'createModel',


        /**
         * Create a model.
         *
         * @requires {object} ModelWindow.
         */
        value: function createModel() {

            // url and id
            this.launchHref = this.launchButton.href;

            // create new model
            var moduleInstance = new _modelWindow.ModelWindow(this);
            moduleInstance.init();
        }
    }]);

    return ModelLaunch;
}();

},{"../utilities/_utilities":9,"./model-window":7}],7:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModelWindow = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utilities = require('../utilities/_utilities');

var utility = _interopRequireWildcard(_utilities);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var defaults = {
    selectors: {
        model_window: 'js-model-template--window',
        model_close: 'js-model-template--close',
        model_active: 'model--active',
        model_content: 'js-model-template--content'
    }
};

/**
 * @class ModelWindow - Appended template element to body of ModelLaunch source page
 * with content taken from the target page via an ajax request.
 *
 * @extends {object} ModelLaunch
 */

var ModelWindow = exports.ModelWindow = function () {

    /**
     * @constructor
     * @param {object} the origin module that launches the model
     */

    function ModelWindow(ModelLaunch) {
        var properties = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

        _classCallCheck(this, ModelWindow);

        // dependency injection
        this.ModelLaunch = ModelLaunch;

        var members = Object.assign({}, defaults, properties);
        this.selectors = members.selectors;
    }

    /**
     * initalise
     *
     */


    _createClass(ModelWindow, [{
        key: 'init',
        value: function init() {

            this.setPage();
            this.createModel(this.defineElements, this.bindEvents);
        }

        /**
        * Set page styling for takeover style model.
        *
        */

    }, {
        key: 'setPage',
        value: function setPage() {
            document.body.classList.add(this.selectors.model_active);
        }

        /**
        * Control functions that create model and setup page.
        *
        * @param {functionCallback} defineElements - Store created elements to instance.
        * @param {functionCallback} bindEvents - Bind events to created elements.
        */

    }, {
        key: 'createModel',
        value: function createModel(defineElements, bindEvents) {

            this.appendModel();
            this.defineElements();
            this.bindEvents();
            this.addContent();
        }

        /**
        * Append model to page.
        *
        */

    }, {
        key: 'appendModel',
        value: function appendModel() {

            var create_model = document.createElement('div');
            create_model = this.ModelLaunch.modelWindowTemplate.parentNode.innerHTML;
            document.body.insertAdjacentHTML('afterbegin', create_model);
        }

        /**
        * Store created elements to instance.
        *
        */

    }, {
        key: 'defineElements',
        value: function defineElements() {

            this.modelWindow = document.querySelector('.' + this.selectors.model_window);
            this.closeButton = this.modelWindow.querySelector('.' + this.selectors.model_close);
            this.modelContent = this.modelWindow.querySelector('.' + this.selectors.model_content);
        }

        /**
        * Bind events to created elements - Using a handleEvent object to configure the function call.
        *
        */

    }, {
        key: 'bindEvents',
        value: function bindEvents() {
            var instance = this;

            var close_button_event = {
                handleEvent: function handleEvent(event) {
                    event.preventDefault();
                    instance.closeModel();
                }
            };

            this.closeButton.addEventListener('click', close_button_event);
        }

        /**
        * Get content via Ajax, place in model window and initalise.
        *
        * @requires {function} ajaxRequest
        * @requires {function} parseHTML
        */

    }, {
        key: 'addContent',
        value: function addContent() {
            var instance = this;

            // get parts from href string

            var _ModelLaunch$launchHr = this.ModelLaunch.launchHref.split('#');

            var _ModelLaunch$launchHr2 = _slicedToArray(_ModelLaunch$launchHr, 2);

            var page_url = _ModelLaunch$launchHr2[0];
            var fragment_selector = _ModelLaunch$launchHr2[1];

            // ajax util function

            utility.ajax(page_url, function (data) {

                // get fragment
                var html_fragment = data.querySelector('.' + fragment_selector);

                // place and initalise
                instance.modelContent.appendChild(html_fragment);
                utility.init(html_fragment);
            });
        }

        /**
        * Control functions that remove model and reset page
        *
        */

    }, {
        key: 'closeModel',
        value: function closeModel() {
            this.removeModel();
            this.resetPage();
        }

        /**
        * Remove model HTML.
        *
        */

    }, {
        key: 'removeModel',
        value: function removeModel() {
            this.modelWindow.parentNode.removeChild(this.modelWindow);
        }

        /**
        * Reset page styling.
        *
        */

    }, {
        key: 'resetPage',
        value: function resetPage() {
            document.body.classList.remove(this.selectors.model_active);
        }
    }]);

    return ModelWindow;
}();

},{"../utilities/_utilities":9}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
var settings = exports.settings = {
    animation: {
        default_timimg: 300
    }
};

},{}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseHTML = exports.capitalise = exports.breakpoint = exports.ajax = exports.init = exports.settings = undefined;

var _settings = require('./_settings');

var _init = require('./init');

var _ajax = require('./ajax');

var _breakpoint = require('./breakpoint');

var _capitalise = require('./capitalise');

var _parsehtml = require('./parsehtml');

exports.settings = _settings.settings;
exports.init = _init.init;
exports.ajax = _ajax.ajax;
exports.breakpoint = _breakpoint.breakpoint;
exports.capitalise = _capitalise.capitalise;
exports.parseHTML = _parsehtml.parseHTML;

},{"./_settings":8,"./ajax":10,"./breakpoint":11,"./capitalise":12,"./init":13,"./parsehtml":14}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ajax = ajax;

var _parsehtml = require('./parsehtml');

/**
* Simple XHR utility.
*
* @param {string} url - The request source.
* @param {callback} callback - The callback of data recieved.
*/
function ajax(url, callback) {

    var request = new XMLHttpRequest();
    request.open('GET', url, true);

    request.onload = function () {
        if (request.status >= 200 && request.status < 400) {

            var data = (0, _parsehtml.parseHTML)(request.responseText);
            callback(data);
        }
    };

    request.send();
}

},{"./parsehtml":14}],11:[function(require,module,exports){
'use strict';

/**
* Get the breakpoint set on :before of the body by CSS.
*
* @return {string} Breakpoint value.
*/

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.breakpoint = breakpoint;
function breakpoint() {

    var breakpoint = {};
    breakpoint.value = window.getComputedStyle(document.querySelector('body'), ':before').getPropertyValue('content').replace(/\"/g, '');

    return breakpoint;
};

},{}],12:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.capitalise = capitalise;
function capitalise(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}

},{}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.init = init;

var _modules = require('../modules/_modules');

/**
* Initalising via data attributes.
*
* @function init
* @param {object} context - HTML Fragment to initalise.
*/
function init(context) {

    // find all data js
    var js_modules = context.querySelectorAll('[data-init]');

    // for each occurance
    Array.from(js_modules).forEach(function (element) {

        // get class name
        var js_class = element.getAttribute('data-init');

        var properties = {};
        properties.element = element;

        // instantiate
        var module_instance = new _modules.modules[js_class](properties);
        module_instance.init();
    });
} /**
   * Dependencies
   */

},{"../modules/_modules":2}],14:[function(require,module,exports){
'use strict';

/**
* Simple HTML parser utility.
*
* @param {string} url - The request source.
* @param {callback} callback - The callback of data recieved.
*/

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseHTML = parseHTML;
function parseHTML(htmlString) {

    var html = document.implementation.createHTMLDocument("example");

    html.documentElement.innerHTML = htmlString;
    return html.body;
}

},{}]},{},[1]);
