(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

// init modules

var _modellaunch = require('./modules/modellaunch');

// init class list
var modules = {
    model: _modellaunch.ModelLaunch
};

/**
* Initalize requiried JS from data attribures found in page HTML.
*
* @constructor
* @param {object} window - Global object referance.
* @param {object} document - Document object referance.
* @param {object} undefined - Ensure undefined remains valueless.
*/
(function (window, document, undefined) {

    // find all data js
    var module_array = document.querySelectorAll('[data-init]');

    // for each data attribue
    [].forEach.call(module_array, function (module) {

        // get class name
        var className = module.getAttribute('data-init');

        // instantiate
        var moduleInstance = new modules[className](module);
        moduleInstance.init();
    });
})(window, document);

},{"./modules/modellaunch":2}],2:[function(require,module,exports){
'use strict';

// dependencies

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModelLaunch = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _modelwindow = require('../modules/modelwindow');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * ModelLaunch - Setup and get params from source markup ready to launch model
 *
 * @class ModelLaunch
 */

var ModelLaunch = exports.ModelLaunch = function () {

    /**
     * Launches full page model.
     *
     * @constructor
     * @param {object} the origin module that launches the model
     */

    function ModelLaunch(context) {
        _classCallCheck(this, ModelLaunch);

        // module markup
        this.context = context;
    }

    _createClass(ModelLaunch, [{
        key: 'init',


        /**
         * initalise
         *
         */
        value: function init() {

            // selectors
            this.selector = {
                'launch-button': 'js-model__launch',
                'model-template': 'js-model-template',
                'model-window': 'js-model-template__window'
            };

            // setup
            this.storeTemplate();
            this.bindEvents();
        }
    }, {
        key: 'storeTemplate',


        /**
         * Fetch and keep model template in memory.
         *
         */
        value: function storeTemplate() {

            var module_template = document.querySelector('#' + this.selector['model-template']);
            this.modelWindowTemplate = module_template.content.querySelector('.' + this.selector['model-window']);
        }
    }, {
        key: 'bindEvents',


        /**
         * Add event handlers.
         *
         */
        value: function bindEvents() {
            var instance = this;

            var launch_button_event = {
                handleEvent: function handleEvent(event) {
                    event.preventDefault();
                    instance.createModel();
                }
            };

            this.launchButton = this.context.querySelector('.' + this.selector['launch-button']);
            this.launchButton.addEventListener('click', launch_button_event);
        }
    }, {
        key: 'createModel',


        /**
         * Create a model.
         *
         * @return {object} ModelTemplate - The appended model.
         */
        value: function createModel() {

            // url and id
            this.launchHref = this.launchButton.href;

            // create new model
            var moduleInstance = new _modelwindow.ModelWindow(this);
            moduleInstance.init();
        }
    }]);

    return ModelLaunch;
}();

},{"../modules/modelwindow":3}],3:[function(require,module,exports){
'use strict';

// module dependencies

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ModelWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ajax = require('../utilities/ajax');

var _parsehtml = require('../utilities/parsehtml');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * ModelWindow - Appended template element to body of ModelLaunch source page
 * with content taken from the target page via an ajax request.
 *
 * @class ModelWindow
 * @extends ModelLaunch
 */

var ModelWindow = exports.ModelWindow = function () {

    /**
     * Launches full page model.
     *
     * @constructor
     * @param {object} the origin module that launches the model
     */

    function ModelWindow(ModelLaunch) {
        _classCallCheck(this, ModelWindow);

        // dependency injection
        this.ModelLaunch = ModelLaunch;
    }

    _createClass(ModelWindow, [{
        key: 'init',


        /**
         * initalise
         *
         */
        value: function init() {

            // selectors
            this.selector = {
                'model-window': 'js-model-template__window',
                'model-close': 'js-model-template__close',
                'model-active': 'model__active',
                'model-content': 'js-model-template__content'
            };

            // go to work
            this.setPage();
            this.createModel(this.defineElements, this.bindEvents);
        }
    }, {
        key: 'setPage',


        /**
        * Set page styling for takeover style model.
        *
        */
        value: function setPage() {
            document.body.classList.add(this.selector['model-active']);
        }
    }, {
        key: 'createModel',


        /**
        * Control functions that create model and setup page.
        *
        * @param {functionCallback} defineElements - Store created elements to instance.
        * @param {functionCallback} bindEvents - Bind events to created elements.
        */
        value: function createModel(defineElements, bindEvents) {

            this.appendModel();
            this.defineElements();
            this.bindEvents();
            this.addContent();
        }
    }, {
        key: 'appendModel',


        /**
        * Append model to page.
        *
        */
        value: function appendModel() {

            var create_model = document.createElement('div');
            create_model = this.ModelLaunch.modelWindowTemplate.parentNode.innerHTML;
            document.body.insertAdjacentHTML('afterbegin', create_model);
        }
    }, {
        key: 'defineElements',


        /**
        * Store created elements to instance.
        *
        */
        value: function defineElements() {

            this.modelWindow = document.querySelector('.' + this.selector['model-window']);
            this.closeButton = this.modelWindow.querySelector('.' + this.selector['model-close']);
            this.modelContent = this.modelWindow.querySelector('.' + this.selector['model-content']);
        }
    }, {
        key: 'bindEvents',


        /**
        * Bind events to created elements - Using a handleEvent object to configure the function call.
        *
        */
        value: function bindEvents() {
            var instance = this;

            var close_button_event = {
                handleEvent: function handleEvent(event) {
                    event.preventDefault();
                    instance.closeModel();
                }
            };

            this.closeButton.addEventListener('click', close_button_event);
        }
    }, {
        key: 'addContent',


        /**
        * Get content via Ajax and place in model window.
        *
        */
        value: function addContent() {
            var instance = this;

            // get parts from href string
            var full_url = this.ModelLaunch.launchHref.split('#');
            var page_url = full_url[0];
            var fragment_selector = full_url[1];

            // ajax (util function)
            (0, _ajax.ajaxRequest)(page_url, function (data) {

                // parse (util function), and append
                var html = (0, _parsehtml.parseHTML)(data);
                var html_fragment = html.querySelector('.' + fragment_selector);

                instance.modelContent.appendChild(html_fragment);
            });
        }
    }, {
        key: 'closeModel',


        /**
        * Control functions that remove model and reset page
        *
        */
        value: function closeModel() {
            this.removeModel();
            this.resetPage();
        }
    }, {
        key: 'removeModel',


        /**
        * Remove model HTML.
        *
        */
        value: function removeModel() {
            this.modelWindow.parentNode.removeChild(this.modelWindow);
        }
    }, {
        key: 'resetPage',


        /**
        * Reset page styling.
        *
        */
        value: function resetPage() {
            document.body.classList.remove(this.selector['model-active']);
        }
    }]);

    return ModelWindow;
}();

},{"../utilities/ajax":4,"../utilities/parsehtml":5}],4:[function(require,module,exports){
'use strict';

/**
* Simple XHR utility.
*
* @param {string} url - The request source.
* @param {callback} callback - The callback of data recieved.
*/

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ajaxRequest = ajaxRequest;
function ajaxRequest(url, callback) {

    var request = new XMLHttpRequest();
    request.open('GET', url, true);

    request.onload = function () {
        if (request.status >= 200 && request.status < 400) {
            callback(request.responseText);
        }
    };

    request.send();
}

},{}],5:[function(require,module,exports){
'use strict';

/**
* Simple HTML parser utility.
*
* @param {string} url - The request source.
* @param {callback} callback - The callback of data recieved.
*/

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.parseHTML = parseHTML;
function parseHTML(htmlString) {

    var html = document.implementation.createHTMLDocument("example");

    html.documentElement.innerHTML = htmlString;
    return html.body;
}

},{}]},{},[1]);
